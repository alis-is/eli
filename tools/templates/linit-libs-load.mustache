	/* eli additional libs */
	luaL_getsubtable(L, LUA_REGISTRYINDEX, "_PRELOAD");
	for (lib = preloadedlibs; lib->func; lib++) {
		lua_pushcfunction(L, lib->func);
		lua_setfield(L, -2, lib->name);
	}
	lua_pop(L, 1);  /* remove _PRELOAD table */
	int arg = lua_gettop(L);
{{#compress}}
	char uncompressedLibs[{{{embedableLibsLength}}} + 1];
	z_stream i_stream;
	i_stream.zalloc = Z_NULL;
	i_stream.zfree = Z_NULL;
	i_stream.opaque = Z_NULL;

	i_stream.avail_in = (uInt)sizeof(lua_libs);           // size of input
	i_stream.next_in = (Bytef *)lua_libs;                 // input char array
	i_stream.avail_out = (uInt)sizeof(uncompressedLibs);  // size of output
	i_stream.next_out = (Bytef *)uncompressedLibs;        // output char array

	inflateInit(&i_stream);
	inflate(&i_stream, Z_NO_FLUSH);
	inflateEnd(&i_stream);

	uncompressedLibs[{{{embedableLibsLength}}}] = '\0';

	luaL_loadstring(L, uncompressedLibs);
{{/compress}}
{{^compress}}
	luaL_loadstring(L, lua_libs);
{{/compress}}
	lua_insert(L,1);
	lua_call(L,arg,1);
	/* end eli additional libs */
}